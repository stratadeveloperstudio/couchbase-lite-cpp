diff --git a/CMakeLists.txt b/CMakeLists.txt
index 89fe9f8a..24c4a6a2 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -46,6 +46,14 @@ add_definitions(-DSQLITE_OMIT_LOAD_EXTENSION        # This one's for SQLiteCpp
                 -DSQLITE_ENABLE_FTS3_PARENTHESIS
                 -DSQLITE_ENABLE_FTS3_TOKENIZER)

+if(DEFINED SSL_LIB AND DEFINED CRYPTO_LIB)
+    if("${SSL_LIB}" STREQUAL "" OR "${CRYPTO_LIB}" STREQUAL "")
+        add_definitions(-DNO_SSL)
+    else()
+        add_definitions(-DOPENSSL_API_1_1 -DSSL_LIB=${SSL_LIB} -DCRYPTO_LIB=${CRYPTO_LIB})
+    endif()
+endif()
+
 if(BUILD_ENTERPRISE)
     add_definitions(-DCOUCHBASE_ENTERPRISE      # Tells LiteCore it's an EE build
                     -DSQLITE_HAS_CODEC          # Enables SQLite encryption extension (SEE)
@@ -195,10 +203,12 @@ set(GENERATED_HEADERS_DIR "${CMAKE_BINARY_DIR}/generated_headers")
 file(MAKE_DIRECTORY "${GENERATED_HEADERS_DIR}")
 if (UNIX)
     execute_process(COMMAND /bin/bash "${PROJECT_SOURCE_DIR}/build_cmake/scripts/get_repo_version.sh"
-                                      "${GENERATED_HEADERS_DIR}/repo_version.h")
+                                      "${GENERATED_HEADERS_DIR}/repo_version.h"
+                                      WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}")
 else()
     execute_process(COMMAND powershell "${PROJECT_SOURCE_DIR}/build_cmake/scripts/get_repo_version.ps1"
-                                      "${GENERATED_HEADERS_DIR}/repo_version.h")
+                                      "${GENERATED_HEADERS_DIR}/repo_version.h"
+                                      WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}")
 endif()
 include_directories(${GENERATED_HEADERS_DIR})
 
diff --git a/Replicator/CivetWebSocket.cc b/Replicator/CivetWebSocket.cc
index b353b185..b24646b9 100644
--- a/Replicator/CivetWebSocket.cc
+++ b/Replicator/CivetWebSocket.cc
@@ -120,7 +120,7 @@ namespace litecore { namespace websocket {
         ,_address(to)
         ,_options(options)
         {
-            mg_init_library(0);
+            mg_init_library(2);
         }

         ~CivetWebSocket() {
@@ -149,6 +149,10 @@ namespace litecore { namespace websocket {
 
         void onMessage(int headerByte, const alloc_slice &data) {
             enqueue(&CivetWebSocket::_onMessage, headerByte, data);
+            if((headerByte & 0x0F) == WEBSOCKET_OPCODE_CONNECTION_CLOSE) {
+                std::unique_lock<std::mutex> lck(_mtx);
+                _cv.notify_all();
+            }
         }
 
         void close(int status, const alloc_slice &message) {
@@ -327,15 +331,25 @@ namespace litecore { namespace websocket {
 
 
         void _sendCloseFrame(alloc_slice body) {
-            if (_sendFrame(WEBSOCKET_OPCODE_CONNECTION_CLOSE, body))
+            std::unique_lock<std::mutex> lck(_mtx);
+            if (_sendFrame(WEBSOCKET_OPCODE_CONNECTION_CLOSE, body)) {
                 _sentCloseFrame = true;
+                // give some time for the normal close operation to finish
+                if (_cv.wait_for(lck, std::chrono::milliseconds(500)) == std::cv_status::timeout) {
+                    LogDebug("Timeout when trying to properly close the connection, closing by force");
+                    onClosed();
+                }
+            } else {
+                LogDebug("Error when trying to properly close the connection, closing by force");
+                onClosed();
+            }
         }
 
 
         void _onClosed() {
-            Log("Connection closed");
             if (!_connection)
                 return;
+            Log("Connection closed");
             _connection = nullptr;
             if (!_rcvdCloseFrame) {
                 _closeStatus = c4error_make(WebSocketDomain, kWebSocketCloseAbnormal,
@@ -345,7 +359,8 @@ namespace litecore { namespace websocket {
             release(this); // balances retain() in _open()
         }
 
-
+        std::mutex _mtx;
+        std::condition_variable _cv;
         litecore::repl::Address _address;
         C4Socket* _c4socket;
         AllocedDict _options;
diff --git a/Replicator/Puller.cc b/Replicator/Puller.cc
index dda6761a..32630b29 100644
--- a/Replicator/Puller.cc
+++ b/Replicator/Puller.cc
@@ -223,6 +223,10 @@ namespace litecore { namespace repl {
 
     // Actually process an incoming "rev" now:
     void Puller::startIncomingRev(MessageIn *msg) {
+        if(!connection()) {
+            logVerbose("startIncomingRev called after connection close, ignoring...");
+            return;
+        }
         decrement(_pendingRevMessages);
         increment(_activeIncomingRevs);
         Retained<IncomingRev> inc;
@@ -295,10 +299,11 @@ namespace litecore { namespace repl {
     
     Worker::ActivityLevel Puller::computeActivityLevel() const {
         ActivityLevel level;
-        if (_fatalError) {
+        if (Worker::computeActivityLevel() == kC4Busy) {    // some assync event is ongoing, do no terminate yet
+            level = kC4Busy;
+        } else if (_fatalError || !connection()) {
             level = kC4Stopped;
-        } else if (Worker::computeActivityLevel() == kC4Busy
-                || (!_caughtUp && nonPassive())
+        } else if ((!_caughtUp && nonPassive())
                 || _waitingForChangesCallback
                 || _pendingRevMessages > 0
                 || _activeIncomingRevs > 0) {
diff --git a/Replicator/Pusher.cc b/Replicator/Pusher.cc
index dd349dac..80cd8677 100644
--- a/Replicator/Pusher.cc
+++ b/Replicator/Pusher.cc
@@ -595,8 +595,11 @@ namespace litecore { namespace repl {
 
     Worker::ActivityLevel Pusher::computeActivityLevel() const {
         ActivityLevel level;
-        if (Worker::computeActivityLevel() == kC4Busy
-                || (_started && !_caughtUp)
+        if (Worker::computeActivityLevel() == kC4Busy) {    // some assync event is ongoing, do no terminate yet
+            level = kC4Busy;
+        } else if (!connection()) {
+            level = kC4Stopped;
+        } else if((_started && !_caughtUp)
                 || _changeListsInFlight > 0
                 || _revisionsInFlight > 0
                 || _blobsInFlight > 0
diff --git a/Replicator/Replicator.cc b/Replicator/Replicator.cc
index 0bd8f4c4..563f6807 100644
--- a/Replicator/Replicator.cc
+++ b/Replicator/Replicator.cc
@@ -165,18 +165,18 @@ namespace litecore { namespace repl {
                     level = kC4Busy;
                 }
                 DebugAssert(level > kC4Stopped);
-                break;
-            }
-            case Connection::kClosing:
+            } break;
+            case Connection::kClosing: {
                 // Remain active while I wait for the connection to finish closing:
                 level = kC4Busy;
-                break;
+            } break;
             case Connection::kDisconnected:
-            case Connection::kClosed:
+            case Connection::kClosed: {
                 // After connection closes, remain active while I wait for db to finish writes:
-                level = (_dbStatus.level == kC4Busy) ? kC4Busy : kC4Stopped;
-                break;
+                level = (max(max(Worker::computeActivityLevel(), _dbStatus.level), max(_pushStatus.level, _pullStatus.level)) == kC4Busy) ? kC4Busy : kC4Stopped;
+            } break;
         }
+
         if (SyncBusyLog.effectiveLevel() <= LogLevel::Info) {
             logInfo("activityLevel=%-s: connectionState=%d",
                 kC4ReplicatorActivityLevelNames[level], _connectionState);
